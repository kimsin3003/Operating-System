2단계에서 구현, 또는 수정한 목록

list_files: ls 명령어 구현
	-> opendir 함수로 디렉토리 파일에 접근한 뒤 readdir함수로 디렉토리에 있는 파일들의 정보가 담긴 dirent 구조체를 읽어왔다. 이 구조체 안에 든 d_name을 출력하였다.

list_files_long: ll 명령어 구현
	-> list_files 함수와 기본 뼈대는 같으며, 더 상세한 정보를 제공하기 위해 stat함수로 파일에 대한 stat 구조체를 얻어와서 그 안의 내용들을 추가로 출력하였다.
	-> S_ISDIR()매크로는 파일이 디렉토리인지 일반 파일인지 말해주며,
	S_IRWXU, S_IRWXG, S_IRWXO 는 각각 user, group, other에 대한 파일의 퍼미션 정보를 담고 있는 비트이며, 이를 비트마스크인 S_IRUSR, S_IWUSR, S_IRGRP...등의 비트마스크와 비교해 퍼미션 정보를 알아냈다.

copy_file: cp 명령어 구현
	-> open 함수로 읽을 파일을 열고, 출력할 파일을 생성/열기 하여 read 함수로 읽고, write 함수로 출력하였다.

remove_file: rm 명령어 구현
	-> unlink 함수로 파일을 삭제하였다.

move_file: mv 명령어 구현
	-> rename 함수로 파일을 이동시켰다.

change_directory: cd 명령어 구현
	-> chdir 함수로 작업 디렉토리를 이동하였다.
print_working_directory: pwd 명령어 구현
	-> getcwd 함수로 현재 작업 디렉토리를 출력하였다.

make_directory:mkdir 명령어 구현
	-> mkdir 함수로 디렉토리를 만들었다. 

remove_directory: rmdir명령어 구현
	-> rmdir 함수로 디렉토릴르 삭제하였다.

redirect: 리디렉션을 수행하는 함수
	-> fork 함수로 자식 프로세스를 만든 뒤 dup2 함수로 매개변수로 받은 파일을 표준입출력(1)으로 설정한다. 자식프로세스를 만드는 이유는 현 명령어를 수행할 때만 리디렉션이 일어나게 하기 위해서이다.
	-> 부모프로세스에서는 자식프로세스가 끝나기를 기다린 뒤, 열었던 파일을 닫는다.
	-> builtin_cmd 함수에서 자식프로세스와 부모프로세스를 다르게 처리하기 위해 프로세스 id를 반환한다.

builtin_cmd: 리디렉션명령어를 처리하고, 내부함수들을 실행한다.
	-> 리디렉션 명령어 ">"가 있는지 검사하고, 있다면 redirect 함수를 실행한다.
	-> redirect 함수의 반환값을 pid에 저장하고, 다른 내부함수들이 동작할 수 있도록 명령어(argv)에서 리디렉션 명령어를 제거한다.
	-> pid가 0보다크면, 즉 부모 프로세스이면, 0을 반환하고 함수를 끝낸다.
	-> pid가 0이면, 즉 자식 프로세스이면 내부 함수들을 실행하며, 내부함수 실행이 끝난 뒤에는 exit 함수로 프로세스를 종료한다.